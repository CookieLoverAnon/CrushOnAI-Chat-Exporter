// ==UserScript==
// @name         CrushOn Chat Exporter
// @namespace    co-export
// @version      1.0
// @description  Capture chats and export as TXT/HTML.
// @match        https://crushon.ai/*
// @match        https://www.crushon.ai/*
// @run-at       document-idle
// @grant        GM_addStyle
// ==/UserScript==
(function(){
  'use strict';

  // ---------------- Styles ----------------
  const CSS = `
  #coBox{position:fixed;right:12px;bottom:12px;z-index:2147483647;display:flex;flex-direction:column;gap:6px}
  #coBox button{padding:7px 10px;font-size:12px;border-radius:8px;border:1px solid #333;color:#fff;background:#111;cursor:pointer}
  #coBox button:focus{outline:2px solid #5ac8fa}
  #coHUD{position:fixed;left:12px;bottom:12px;z-index:2147483647;background:#0f0f10;color:#e6e6e6;border:1px solid #333;border-radius:8px;padding:8px 10px;font:12px/1.4 monospace;min-width:300px;max-width:55vw}
  #coHUD .ok{color:#7bff7b} #coHUD .warn{color:#ffd479} #coHUD .err{color:#ff6b6b} #coHUD .muted{opacity:.8}
  #coHUD .bar{height:6px;background:#222;border:1px solid #333;border-radius:6px;overflow:hidden;margin:6px 0}
  #coHUD .bar>i{display:block;height:100%;width:0;background:#6aa3ff}
  .coPickOverlay{outline:2px solid #5ac8fa !important;outline-offset:-2px !important}
  #coTab{position:fixed;right:12px;bottom:12px;width:22px;height:22px;border-radius:6px;background:#111;border:1px solid #333;color:#fff;z-index:2147483647;display:none;align-items:center;justify-content:center;font:12px monospace}
  .coMenu{position:fixed;background:#151515;color:#fff;border:1px solid #3a3a3a;border-radius:10px;box-shadow:0 10px 32px #000b;display:none;min-width:170px;padding:6px;z-index:2147483647}
  .coMenu button{display:block;width:100%;text-align:left;margin:2px 0;padding:7px 10px;background:#1b1b1c;color:#fff;border:1px solid #333;border-radius:8px}
  .coMenu button:hover{background:#222}
  #coHelp{position:fixed;inset:6% 6% auto 6%;z-index:2147483647;background:#0f0f10;color:#e6e6e6;border:1px solid #333;border-radius:10px;display:none}
  #coHelp header{display:flex;gap:8px;align-items:center;justify-content:space-between;padding:8px 10px;border-bottom:1px solid #333;background:#111}
  #coHelp header button{padding:6px 8px;font-size:12px;border-radius:8px;border:1px solid #333;color:#fff;background:#222;cursor:pointer}
  #coHelp .body{padding:12px 14px;font:13px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial}
  `;
  if (typeof GM_addStyle === 'function') GM_addStyle(CSS); else { const s=document.createElement('style'); s.textContent=CSS; (document.head||document.documentElement).appendChild(s); }

  // ---------------- Helpers ----------------
  function el(tag, attrs){ const e=document.createElement(tag); if(attrs){ for(const k in attrs){ if(k==='textContent') e.textContent=attrs[k]; else e.setAttribute(k, attrs[k]); } } return e; }
  function mkBtn(label, onClick){ const b=document.createElement('button'); b.type='button'; b.textContent=label; if(onClick) b.addEventListener('click', onClick); return b; }
  function $(sel,root){ return (root||document).querySelector(sel); }
  function qsa(sel,root){ return Array.from((root||document).querySelectorAll(sel)); }
  function download(name, data, mime){ const blob=new Blob([data],{type:(mime||'text/plain;charset=utf-8')}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download=name; (document.body||document.documentElement).appendChild(a); a.click(); setTimeout(()=>{URL.revokeObjectURL(a.href); a.remove();},600); }
  const sleep = ms=>new Promise(r=>setTimeout(r,ms));
  function esc(s){ return String(s).replace(/[^a-zA-Z0-9_-]/g, m=>`\\${m}`); }
  const ts = ()=> new Date().toISOString().replace(/[:.]/g,'-');

  // ---------------- State ----------------
  let CHAT_CONTAINER = null; let running=false, iters=0, stalls=0, lastHash='';
  const records=[]; const seen=new Set(); let openMenu=null;

  // ---------------- Selectors ----------------
  const SEL_CONTAINER = '#chat-container';
  const SEL_GROUPS = [
    '#chat-container > div.group.relative.flex.w-full.items-start',
    '#chat-container > div.relative.flex.w-full.items-start'
  ].join(',');
  const SEL_MARKDOWN_BLOCK = "[class*='MarkdownText_']";

  // ---------------- UI ----------------
  function ensureUI(){
    if (!$('#coBox')){
      const box = el('div',{id:'coBox'});
      const bCapture = mkBtn('Capture now (.TXT only)', captureNow);
      const bExport  = mkBtn('Export ▾'); bExport.addEventListener('click', ()=>toggleMenu('export', bExport));
      const bTools   = mkBtn('Tools ▾');  bTools.addEventListener('click', ()=>toggleMenu('tools', bTools));
      const bClear   = mkBtn('Clear captured', clearCaptured);
      const bHide    = mkBtn('Hide', ()=>hidePanel(true));
      box.append(bCapture,bExport,bTools,bClear,bHide);
      (document.body||document.documentElement).appendChild(box);
    }
    if (!$('#coHUD')){
      const hud = el('div',{id:'coHUD',role:'status','aria-live':'polite'});
      hud.innerHTML = `
        <div><b>Status:</b> <span id=coStatus class=muted>idle</span></div>
        <div class=bar><i id=coBar></i></div>
        <div>Captured: <span id=coMsgs>0</span> | Groups: <span id=coGroups>0</span> | Nodes: <span id=coNodes>0</span></div>
        <div>Iters: <span id=coIters>0</span> | Stalls: <span id=coStalls>0</span></div>
        <div>Scroller: <span id=coScroller>document</span></div>`;
      (document.body||document.documentElement).appendChild(hud);
    }
    if (!$('#coTab')){ const tab = el('div',{id:'coTab',textContent:'≡'}); tab.onclick=()=>{ $('#coBox').style.display=''; $('#coHUD').style.display=''; tab.style.display='none'; }; (document.body||document.documentElement).appendChild(tab); }
    if (!$('#coMenuExport')){ const m=buildExportMenu(); document.body.appendChild(m); }
    if (!$('#coMenuTools')){ const m=buildToolsMenu(); document.body.appendChild(m); }
    if (!$('#coHelp')){ document.body.appendChild(buildHelp()); }
  }

  function UI(){ const g=id=>document.getElementById(id); return {status:g('coStatus'), bar:g('coBar'), msgs:g('coMsgs'), groups:g('coGroups'), nodes:g('coNodes'), iters:g('coIters'), stalls:g('coStalls'), scroller:g('coScroller')}; }
  function setStatus(t,c='muted'){ const U=UI(); if(U.status){ U.status.className=c; U.status.textContent=t; } }
  function setBar(p){ const U=UI(); if(U.bar) U.bar.style.width = Math.max(0,Math.min(100,p))+'%'; }
  function hidePanel(hide=true){ const box=$('#coBox'), hud=$('#coHUD'), tab=$('#coTab'); if(!box||!hud||!tab) return; box.style.display=hide?'none':''; hud.style.display=hide?'none':''; tab.style.display=hide?'flex':'none'; closeMenus(); }
  function pulseBar(){ let w=0; const tick=()=>{ if(!running) return; w=(w+5)%100; setBar(w); requestAnimationFrame(tick); }; requestAnimationFrame(tick); }
  window.addEventListener('keydown', e=>{ if(e.altKey && String(e.key).toLowerCase()==='e'){ ensureUI(); hidePanel(false); } }, true);
  const mo = new MutationObserver(()=> ensureUI()); mo.observe(document.documentElement,{childList:true,subtree:true}); setInterval(ensureUI,1500); ensureUI();

  // ----- Menus -----
  function buildExportMenu(){
    const m=el('div',{id:'coMenuExport',class:'coMenu'});
    m.append(
      mkBtn('Export .txt', exportTxt),
      mkBtn('Export .html', exportHTML)
    );
    return m;
  }
  function buildToolsMenu(){
    const m=el('div',{id:'coMenuTools',class:'coMenu'});
    m.append(
      mkBtn('Pick chat box', pickContainer),
      mkBtn('Load all messages', loadAll),
      mkBtn('Stop', stop),
      mkBtn('Diagnostics JSON', showDiag),
      mkBtn('Read me', ()=>{ $('#coHelp').style.display='block'; closeMenus(); })
    );
    return m;
  }
  function toggleMenu(which, btn){
    const id = which==='export'?'#coMenuExport':'#coMenuTools';
    const menu = $(id);
    if (!menu) return;

    if (openMenu===id && menu.style.display==='block'){ menu.style.display='none'; openMenu=null; return; }

    menu.style.visibility='hidden';
    menu.style.display='block';
    const mw = menu.offsetWidth, mh = menu.offsetHeight;
    const r = btn.getBoundingClientRect();
    const px = Math.round(window.scrollX + Math.min(Math.max(8, r.left), window.innerWidth - mw - 8));
    let py = Math.round(window.scrollY + r.top - mh - 8);
    if (py < window.scrollY + 8) py = Math.round(window.scrollY + Math.min(r.bottom + 8, window.innerHeight - mh - 8));
    menu.style.left = px + 'px';
    menu.style.top  = py + 'px';
    menu.style.visibility='visible';

    for(const id2 of ['#coMenuExport','#coMenuTools']){ if(id2!==id){ const m2=$(id2); if(m2) m2.style.display='none'; } }

    menu.style.display='block';
    openMenu=id;
  }
  function closeMenus(){ for(const sel of ['#coMenuExport','#coMenuTools']){ const n=$(sel); if(n) n.style.display='none'; } openMenu=null; }
  document.addEventListener('click', e=>{ if(!(e.target.closest && (e.target.closest('#coBox')||e.target.closest('.coMenu')))) closeMenus(); }, true);

  // ----- Help pane (README) -----
  function buildHelp(){
    const p=el('div',{id:'coHelp'});
    p.innerHTML = `
      <header><b>CrushOn Exporter • Read Me</b> <button id=coHelpClose>Close</button></header>
      <div class=body>
        <p><b>Capture now:</b> Snapshot current chat text and stage it for <i>.txt export only</i>. Not required for HTML.</p>
        <p><b>Pick chat:</b> If content is missed, click and select the real scroll area. Then run <i>Load all messages</i> to fetch older history. Use <i>Capture now</i> again before exporting TXT.</p>
        <p><b>Stop:</b> If the text area seleted with "pick chat" does not produce results, use this to stop the search process.</p>
        <p><b>Clear captured:</b> Reset the staged snapshot to avoid duplicates or before switching chats.</p>
        <p><b>Diagnostics JSON:</b> For developer use, use pick chat to select window, then this to gather information about it.</p>
      </div>`;
    p.querySelector('#coHelpClose').onclick=()=>{ p.style.display='none'; };
    return p;
  }

  // ---------------- Picking ----------------
  function pickContainer(){ setStatus('pick the chat area','warn'); let last; const over=e=>{ if(last) last.classList.remove('coPickOverlay'); e.target.classList.add('coPickOverlay'); last=e.target; }; const click=e=>{ e.preventDefault(); e.stopPropagation(); cleanup(); CHAT_CONTAINER=e.target; setStatus('container selected','ok'); }; const esc=e=>{ if(e.key==='Escape') cleanup(); }; function cleanup(){ document.removeEventListener('mouseover',over,true); document.removeEventListener('click',click,true); document.removeEventListener('keydown',esc,true); if(last) last.classList.remove('coPickOverlay'); } document.addEventListener('mouseover',over,true); document.addEventListener('click',click,true); document.addEventListener('keydown',esc,true); }

  // ---------------- Loading + Capture ----------------
  async function loadAll(){ if(running) return; running=true; iters=0; stalls=0; lastHash=''; setStatus('loading','warn'); pulseBar(); const scroller=findScroller(resolveContainer()); UI().scroller.textContent=scroller===document.scrollingElement?'document':nodeTag(scroller); const MAX=800; while(running && iters<MAX){ scroller.scrollTop=0; scroller.dispatchEvent(new WheelEvent('wheel',{deltaY:-1200,bubbles:true,cancelable:true})); await sleep(250); scroller.scrollTop=scroller.scrollHeight; scroller.dispatchEvent(new WheelEvent('wheel',{deltaY:1200,bubbles:true,cancelable:true})); await sleep(250); iters++; UI().iters.textContent=String(iters); setBar(iters%100); const now=snapshotHash(); if(now===lastHash) stalls++; else stalls=0; lastHash=now; UI().stalls.textContent=String(stalls); if(stalls>=10) break; } running=false; setStatus('ready','ok'); setBar(100); }
  function stop(){ running=false; setStatus('stopped','warn'); setBar(0); }
  function captureNow(){ const items = collectFromDOM(); let added=0; for(const it of items){ const key = it.id || (it.who+'|'+hash(it.html)); if(seen.has(key)) continue; seen.add(key); records.push(it); added++; } UI().msgs.textContent=String(records.length); setStatus('captured '+added+' items','ok'); }
  function clearCaptured(){ records.length=0; seen.clear(); UI().msgs.textContent='0'; setStatus('cleared','ok'); }

  // ---------------- Extraction helpers ----------------CrushOn Chat Exporter
  function resolveContainer(){ return CHAT_CONTAINER || $(SEL_CONTAINER) || $('section#chat-container') || document.body; }
  function findScroller(el){ let cur=el||resolveContainer(); for(let i=0;i<10 && cur;i++){ if(cur.scrollHeight - cur.clientHeight > 40) return cur; cur = cur.parentElement || document.scrollingElement; } return document.scrollingElement || document.documentElement; }
  function getGroups(){ const root=resolveContainer(); let nodes = qsa(SEL_GROUPS, root); nodes.sort((a,b)=>a.getBoundingClientRect().top - b.getBoundingClientRect().top); UI().groups.textContent=String(nodes.length); return nodes; }
  function getMarkdownBlock(g){ return g.querySelector(SEL_MARKDOWN_BLOCK) || g; }
  function collectFromDOM(){ const groups=getGroups(); const out=[]; for(const g of groups){ const body=getMarkdownBlock(g); const html = normalizeHTML(body.innerHTML||''); if(!html.trim()) continue; out.push({ t: Date.now(), who: guessWho(g), html }); } return out; }
  function guessWho(n){ const cand = n.querySelector("strong,b,[class*='name'],[class*='Name'],[data-testid*='author']"); if(cand) return (cand.textContent||'').trim().replace(/\s+/g,' '); const m=(n.textContent||'').trim().match(/^([^\n:]{2,30}):/); return m?m[1].trim():''; }
  function normalizeHTML(s){ const div=document.createElement('div'); div.innerHTML=s; div.querySelectorAll('a').forEach(a=>{ try{ a.href=String(new URL(a.getAttribute('href')||a.href, location.href)); }catch(_){} }); div.querySelectorAll('img').forEach(img=>{ try{ img.src=String(new URL(img.getAttribute('src')||img.src, location.href)); img.loading='eager'; img.decoding='sync'; }catch(_){} }); return div.innerHTML; }
  function snapshotHash(){ const nodes=getGroups().slice(0,30); const s=nodes.map(n=> (n.textContent||'').trim().slice(0,80)).join('|'); let h=0; for(let i=0;i<s.length;i++) h=(h*31 + s.charCodeAt(i))>>>0; UI().nodes.textContent=String(nodes.length); return String(h); }
  function nodeTag(n){ return n ? (n.tagName + (n.id?('#'+n.id):'')) : 'null'; }
  function stripHTML(s){ const d=document.createElement('div'); d.innerHTML=s; return (d.textContent||'').replace(/\r/g,'').replace(/[ \t]+\n/g,'\n').replace(/\n{3,}/g,'\n\n').trim(); }
  function hash(str){ let h=0; for(let i=0;i<str.length;i++){ h=(h*31 + str.charCodeAt(i))>>>0; } return h; }

  // ---------------- Exports ----------------
  async function exportTxt(){ setStatus('exporting','warn'); const items = records.length? records.slice().sort((a,b)=>a.t-b.t) : collectFromDOM(); const lines=[]; lines.push('# '+(document.title||'CrushOn Chat')); lines.push('URL: '+location.href); lines.push('Exported: '+new Date().toISOString()); lines.push(''); for(const it of items){ const who=it.who?`[${it.who}] `:''; const text = it.text || stripHTML(it.html||''); lines.push(who+text); lines.push(''); } download('crushon-chat-'+ts()+'.txt', lines.join('\n')); setStatus('exported .txt','ok'); }
  async function exportHTML(){ setStatus('building html','warn'); const items = collectFromDOM(); const inlined = await inlineImagesHTML(items); const html = wrapHTML(inlined); download('crushon-chat-'+ts()+'.html', html, 'text/html;charset=utf-8'); setStatus('exported .html','ok'); }

  async function inlineImagesHTML(items){ const container=document.createElement('div'); for(const it of items){ const art=document.createElement('article'); art.className='msg'; const hdr=document.createElement('header'); hdr.textContent=it.who||''; const body=document.createElement('div'); body.className='body'; body.innerHTML=it.html; art.append(hdr,body); container.appendChild(art); } const imgs = Array.from(container.querySelectorAll('img')); await Promise.all(imgs.map(async img=>{ const src=img.getAttribute('src'); if(!src) return; try{ const res=await fetch(src, {mode:'cors'}); const blob=await res.blob(); const data=await blobToDataURL(blob); img.setAttribute('src', data); }catch(_){ } })); return container.innerHTML; }
  function blobToDataURL(blob){ return new Promise((res,rej)=>{ const r=new FileReader(); r.onload=()=>res(r.result); r.onerror=rej; r.readAsDataURL(blob); }); }

  function wrapHTML(inner){ return `<!doctype html><html><head>${styleHead()}</head><body><div class=chat>${metaBlock()}${inner}</div></body></html>`; }
  function styleHead(){ return `<meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"><style>${styleCss()}</style>`; }
  function styleCss(){ return `:root{color-scheme:dark light} body{margin:24px;font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;background:#0b0b0b;color:#e6e6e6} a{color:#7bb7ff} .chat{max-width:920px;margin:0 auto} .meta{font:12px/1.4 monospace;opacity:.8;margin-bottom:12px} article.msg{background:#121212;border:1px solid #333;border-radius:10px;padding:12px 14px;margin:10px 0} article.msg header{font-weight:600;margin-bottom:6px;opacity:.9} article.msg .body img{max-width:100%;height:auto} pre,code{background:#0e0e0e;border:1px solid #2a2a2a;border-radius:6px;padding:2px 4px}`; }
  function metaBlock(){ return `<div class=meta>URL: ${escapeHtml(location.href)}<br>Exported: ${new Date().toISOString()}</div>`; }
  function escapeHtml(s){ return String(s).replace(/[&<>\"']/g, c=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;"}[c])); }

  // ---------------- Diagnostics ----------------
  function showDiag(){ const box = resolveContainer(); const info = { url: location.href, title: document.title, time: new Date().toISOString(), containerCss: cssPath(box), containerRotated: /rotateX\(180deg\)/i.test(box.getAttribute('style')||getComputedStyle(box).transform||''), groupCount: getGroups().length, firstGroupPath: getGroups()[0] ? cssPath(getGroups()[0]) : '' }; const pretty = JSON.stringify(info,null,2); download('diagnostics.json', pretty, 'application/json'); }
  function cssPath(start){ if(!(start instanceof Element)) return ''; const seg=[]; let node=start; while(node && node.nodeType===1){ let part=node.nodeName.toLowerCase(); if(node.id){ part += '#' + esc(node.id); seg.unshift(part); break; } const cls = (node.className && typeof node.className==='string')? node.className.trim().split(/\s+/).map(esc).join('.') : ''; if(cls) part += '.'+cls; let idx=1; let sib=node.previousElementSibling; while(sib){ if(sib.nodeName===node.nodeName) idx++; sib=sib.previousElementSibling; } let hasSameAfter=false; let ns=node.nextElementSibling; while(ns && !hasSameAfter){ if(ns.nodeName===node.nodeName) hasSameAfter=true; ns=ns.nextElementSibling; } if(idx>1 || hasSameAfter) part += ':nth-of-type('+idx+')'; seg.unshift(part); node=node.parentElement; } return seg.join(' > '); }

  // --------------- Boot ----------------
  if ($(SEL_CONTAINER)) CHAT_CONTAINER = $(SEL_CONTAINER);
  setStatus('idle');
})();
